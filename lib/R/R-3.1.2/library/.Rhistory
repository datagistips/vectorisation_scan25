}
findNode(test, rootNode)
findNode <- function(graph, rootNode, visitedNodes=NA) {
print("-+ début --")
print("visitedNodes1")
print(visitedNodes)
neighs = neighbors(graph, rootNode)
for (neigh in neighs) {
print("visitedNodes2")
print(visitedNodes)
node = V(test)[neigh]
if (!(node %in% visitedNodes)) {
if(node$color=="red") {
print("ok")
} else {
print("node")
print(node)
visitedNodes <- c(visitedNodes, node)
print(paste("visited", visitedNodes))
findNode(test, node, visitedNodes)
}
}
}
}
findNode(test, rootNode)
findNode <- function(graph, rootNode, visitedNodes=NA) {
print("-+ début --")
print("visitedNodes1")
print(visitedNodes)
neighs = neighbors(graph, rootNode)
for (neigh in neighs) {
print("visitedNodes2")
print(visitedNodes)
node = V(test)[neigh]
if (!(node %in% visitedNodes)) {
print("visitedNodes3")
print(visitedNodes)
if(node$color=="red") {
print("ok")
} else {
print("node")
print(node)
visitedNodes <- c(visitedNodes, node)
print(paste("visited", visitedNodes))
findNode(test, node, visitedNodes)
}
}
}
}
findNode(test, rootNode)
findNode <- function(graph, rootNode, visitedNodes=NA) {
print("-+ début --")
print("visitedNodes1")
print(visitedNodes)
neighs = neighbors(graph, rootNode)
for (neigh in neighs) {
print("visitedNodes2")
print(visitedNodes)
node = V(test)[neigh]
if (!(node %in% visitedNodes)) {
print("visitedNodes3")
print(visitedNodes)
if(node$color=="red") {
print("ok")
} else {
print("visitedNodes4")
print(visitedNodes)
print("node")
print(node)
visitedNodes <- c(visitedNodes, node)
print(paste("visited", visitedNodes))
findNode(test, node, visitedNodes)
}
}
}
}
findNode <- function(graph, rootNode, visitedNodes=NA) {
print("-+ début --")
print("visitedNodes1")
print(visitedNodes)
neighs = neighbors(graph, rootNode)
for (neigh in neighs) {
print("visitedNodes2")
print(visitedNodes)
node = V(test)[neigh]
if (!(node %in% visitedNodes)) {
print("visitedNodes3")
print(visitedNodes)
if(node$color=="red") {
print("ok")
} else {
print("visitedNodes4")
print(visitedNodes)
print("node")
print(node)
visitedNodes <- c(visitedNodes, node)
print(paste("visited", visitedNodes))
findNode(test, node, visitedNodes)
}
}
}
}
findNode(test, rootNode)
findNode <- function(graph, rootNode, visitedNodes=NA) {
print("-+ début --")
print("visitedNodes1")
print(visitedNodes)
neighs = neighbors(graph, rootNode)
for (neigh in neighs) {
print("visitedNodes2")
print(visitedNodes)
node = V(test)[neigh]
if (!(node %in% visitedNodes)) {
print("visitedNodes3")
print(visitedNodes)
if(node$color=="red") {
print("ok")
print("node")
print(node)
} else {
print("visitedNodes4")
print(visitedNodes)
print("node")
print(node)
visitedNodes <- c(visitedNodes, node)
print(paste("visited", visitedNodes))
findNode(test, node, visitedNodes)
}
}
}
}
findNode(test, rootNode)
rootNode
findNode <- function(graph, rootNode, visitedNodes=NA, okNode=NA) {
print("-+ début --")
print("visitedNodes1")
print(visitedNodes)
neighs = neighbors(graph, rootNode)
for (neigh in neighs) {
print("visitedNodes2")
print(visitedNodes)
node = V(test)[neigh]
if (!(node %in% visitedNodes)) {
print("visitedNodes3")
print(visitedNodes)
if(node$color=="red") {
print("ok")
print("node")
okNode <- c(okNode, node)
print(okNode)
} else {
print("visitedNodes4")
print(visitedNodes)
print("node")
print(node)
visitedNodes <- c(visitedNodes, node)
print(paste("visited", visitedNodes))
findNode(test, node, visitedNodes)
}
}
}
}
findNode(test, rootNode)
?source
getOption("encoding")
Sys.getlocale('LC_CTYPE')
?source
sessionInfo()$locale
?pause
(x <- "fa\xE7ile")
charToRaw(xx <- iconv(x, "latin1", "UTF-8"))
## in a UTF-8 locale, print(xx)
iconv(x, "latin1", "ASCII")          #   NA
options("encoding")
cat("a\U00E9")
require("RStoolbox", quietly = TRUE)
cat("b\U00E9")
cat("a\U00E9")
suppressMessages(suppressWarnings(require("RStoolbox", quietly = TRUE)))
cat("b\U00E9")
?source
sessionInfo()
coucheref <- readOGR("IN", "TRONCON_HYDROGRAPHIQUE__V3_modif")
library(rgdal)
library(rgeos)
setwd("D:/WKSP/160208_DDTM83_BCAE")
coucheref <- readOGR("IN", "TRONCON_HYDROGRAPHIQUE__V3_modif")
bdtopo <- readOGR("OUT/QUALITE", "traces_bcae")
coucheref <- readOGR("IN", "TRONCON_HYDROGRAPHIQUE__V3_modif")
traces <- readOGR("OUT/QUALITE", "traces_bcae")
ids = traces$idbcae
pts1 = spsample(coucheref, n=100000, type="regular")
ids1 = over(gBuffer(pts1, width=1, byid=T), coucheref)$id
coords1 = coordinates(pts1)
pts2 = spsample(traces, n=100000, type="regular")
ids2 = over(gBuffer(pts2, width=1, byid=T), traces)$id
coords2 = coordinates(pts2)
out=list()
dists = get.knnx(data=coords1, query=coords2, k=1)$nn.dist
pts = SpatialPointsDataFrame(pts2, data=data.frame(id=ids2, distance=dists))
pts$qualite = 0
pts$qualite[which((dists - mean(dists)) > 2*sd(dists))] = 1
pts$qualite[which((dists - mean(dists)) > 3*sd(dists))] = 2
pts$qualite[which((dists - mean(dists)) > 4*sd(dists))] = 3
pts$qualite[which((dists - mean(dists)) > 5*sd(dists))] = 4
pts$qualite[which((dists - mean(dists)) > 6*sd(dists))] = 5
out=list()
dists = get.knnx(data=coords1, query=coords2, k=1)$nn.dist
library(FNN)
dists = get.knnx(data=coords1, query=coords2, k=1)$nn.dist
pts = SpatialPointsDataFrame(pts2, data=data.frame(id=ids2, distance=dists))
pts$qualite = 0
pts$qualite[which((dists - mean(dists)) > 2*sd(dists))] = 1
pts$qualite[which((dists - mean(dists)) > 3*sd(dists))] = 2
pts$qualite[which((dists - mean(dists)) > 4*sd(dists))] = 3
pts$qualite[which((dists - mean(dists)) > 5*sd(dists))] = 4
pts$qualite[which((dists - mean(dists)) > 6*sd(dists))] = 5
names(pts)
writeOGR(pts, "OUT/QUALITE", "pts_bcae", "ESRI Shapefile")
qualityPoints = function(sourceLayer=coucheref, targetLayer=traces) {
# LES IDS à CALCULER
ids = targetLayer$idbcae
pts1 = spsample(sourceLayer, n=100000, type="regular")
ids1 = over(gBuffer(pts1, width=1, byid=T), sourceLayer)$id
coords1 = coordinates(pts1)
pts2 = spsample(targetLayer, n=100000, type="regular")
ids2 = over(gBuffer(pts2, width=1, byid=T), targetLayer)$id
coords2 = coordinates(pts2)
# DISTANCES PAR POINTS
out=list()
dists = get.knnx(data=coords1, query=coords2, k=1)$nn.dist
pts = SpatialPointsDataFrame(pts2, data=data.frame(id=ids2, distance=dists))
pts$qualite = 0
pts$qualite[which((dists - mean(dists)) > 2*sd(dists))] = 1
pts$qualite[which((dists - mean(dists)) > 3*sd(dists))] = 2
pts$qualite[which((dists - mean(dists)) > 4*sd(dists))] = 3
pts$qualite[which((dists - mean(dists)) > 5*sd(dists))] = 4
pts$qualite[which((dists - mean(dists)) > 6*sd(dists))] = 5
return(pts)
}
pts = qualityPoints(sourceLayer=coucheref, targetLayer=traces)
library(rgdal)
setwd("D:/WKSP/160208_DDTM83_BCAE")
f = readOGR("OUT", "traces_qualite")
library(rgdal)
setwd("D:/WKSP/160208_DDTM83_BCAE")
f = readOGR("OUT/QUALITE", "traces_bcae")
mydata = f@data[, c("proplong", "nlignes", "distance")]
names(f)
out=list()
for (i in 1:length(ids)) {
id=ids[i]
coucheref.sample = coucheref[coucheref$id==id, ]
traces.sample = traces[traces$id==id,  ]
pts.ref = spsample(coucheref.sample, n=gLength(coucheref.sample)/10, type="regular") # tous les 10 m
pts.traces = spsample(traces.sample, n=gLength(traces.sample)/10, type="regular")
coords.ref = coordinates(pts.ref)
coords.traces = coordinates(pts.traces)
dists = get.knnx(data=coords.ref, query=coords.traces, k=1)$nn.dist
meandist = mean(dists)
out[[i]] = meandist
}
meandists = unlist(out)
df = data.frame(ids, meandist=meandists, classe_distance=0)
i
id=ids[i]
coucheref.sample = coucheref[coucheref$id==id, ]
traces.sample = traces[traces$id==id,  ]
names(traces)
traces.sample = traces[traces$idbcae==id,  ]
pts.ref = spsample(coucheref.sample, n=gLength(coucheref.sample)/10, type="regular") # tous les 10 m
pts.traces = spsample(traces.sample, n=gLength(traces.sample)/10, type="regular")
coords.ref = coordinates(pts.ref)
coords.traces = coordinates(pts.traces)
dists = get.knnx(data=coords.ref, query=coords.traces, k=1)$nn.dist
meandist = mean(dists)
out=list()
for (i in 1:length(ids)) {
id=ids[i]
coucheref.sample = coucheref[coucheref$id==id, ]
traces.sample = traces[traces$idbcae==id,  ]
pts.ref = spsample(coucheref.sample, n=gLength(coucheref.sample)/10, type="regular") # tous les 10 m
pts.traces = spsample(traces.sample, n=gLength(traces.sample)/10, type="regular")
coords.ref = coordinates(pts.ref)
coords.traces = coordinates(pts.traces)
dists = get.knnx(data=coords.ref, query=coords.traces, k=1)$nn.dist
meandist = mean(dists)
out[[i]] = meandist
}
i
length(ids)
coucheref.sample = coucheref[coucheref$id==id, ]
traces.sample = traces[traces$idbcae==id,  ]
pts.ref = spsample(coucheref.sample, n=gLength(coucheref.sample)/10, type="regular") # tous les 10 m
pts.traces = spsample(traces.sample, n=gLength(traces.sample)/10, type="regular")
plot(traces.sample)
gLength(traces.sample)/10
gLength(traces.sample)
id
out=list()
for (i in 1:length(ids)) {
if (!(id %in% c(835))) {
id=ids[i]
coucheref.sample = coucheref[coucheref$id==id, ]
traces.sample = traces[traces$idbcae==id,  ]
pts.ref = spsample(coucheref.sample, n=gLength(coucheref.sample)/10, type="regular") # tous les 10 m
pts.traces = spsample(traces.sample, n=gLength(traces.sample)/10, type="regular")
coords.ref = coordinates(pts.ref)
coords.traces = coordinates(pts.traces)
dists = get.knnx(data=coords.ref, query=coords.traces, k=1)$nn.dist
meandist = mean(dists)
out[[i]] = meandist
}
}
out=list()
for (i in 1:length(ids)) {
if (!(id %in% c(835))) {
id=ids[i]
coucheref.sample = coucheref[coucheref$id==id, ]
traces.sample = traces[traces$idbcae==id,  ]
pts.ref = spsample(coucheref.sample, n=gLength(coucheref.sample)/10, type="regular") # tous les 10 m
pts.traces = spsample(traces.sample, n=gLength(traces.sample)/10, type="regular")
coords.ref = coordinates(pts.ref)
coords.traces = coordinates(pts.traces)
dists = get.knnx(data=coords.ref, query=coords.traces, k=1)$nn.dist
meandist = mean(dists)
out[[i]] = meandist
}
}
meandists = unlist(out)
meandists
for (i in 1:length(ids)) {
if (!(i %in% c(72))) {
id=ids[i]
coucheref.sample = coucheref[coucheref$id==id, ]
traces.sample = traces[traces$idbcae==id,  ]
pts.ref = spsample(coucheref.sample, n=gLength(coucheref.sample)/10, type="regular") # tous les 10 m
pts.traces = spsample(traces.sample, n=gLength(traces.sample)/10, type="regular")
coords.ref = coordinates(pts.ref)
coords.traces = coordinates(pts.traces)
dists = get.knnx(data=coords.ref, query=coords.traces, k=1)$nn.dist
meandist = mean(dists)
out[[i]] = meandist
}
}
meandists = unlist(out)
df = data.frame(ids, meandist=meandists, classe_distance=0)
meandist
out=list()
for (i in 1:length(ids)) {
if (!(i %in% c(72))) {
id=ids[i]
coucheref.sample = coucheref[coucheref$id==id, ]
traces.sample = traces[traces$idbcae==id,  ]
pts.ref = spsample(coucheref.sample, n=gLength(coucheref.sample)/10, type="regular") # tous les 10 m
pts.traces = spsample(traces.sample, n=gLength(traces.sample)/10, type="regular")
coords.ref = coordinates(pts.ref)
coords.traces = coordinates(pts.traces)
dists = get.knnx(data=coords.ref, query=coords.traces, k=1)$nn.dist
meandist = mean(dists)
out[[i]] = cbind(id,  meandist)
}
}
meandists = do.call(rbind, out)
meandists
meandists = as.data.frame(do.call(rbind, out))
meandists
names(meandists)
meandists$distance = 0
meandists$distance[which((meandists$meandist-mean(meandists$meandist)) > 1*sd(meandists$meandist))] = 1
meandists$distance[which((meandists$meandist-mean(meandists$meandist)) > 2*sd(meandists$meandist))] = 2
meandists$distance[which((meandists$meandist-mean(meandists$meandist)) > 3*sd(meandists$meandist))] = 3
meandists$distance[which((meandists$meandist-mean(meandists$meandist)) > 4*sd(meandists$meandist))] = 4
meandists$distance[which((meandists$meandist-mean(meandists$meandist)) > 5*sd(meandists$meandist))] = 5
meandists
which((meandists$meandist-mean(meandists$meandist)) > 1*sd(meandists$meandist))
which((meandists$meandist-mean(meandists$meandist)) > 2*sd(meandists$meandist))
which((meandists$meandist-mean(meandists$meandist)) > 3*sd(meandists$meandist))
which((meandists$meandist-mean(meandists$meandist)) > 4*sd(meandists$meandist))
which((meandists$meandist-mean(meandists$meandist)) > 5*sd(meandists$meandist))
meandists$meandist
sd(meandists$meandist))
sd(meandists$meandist)
meandists$meandist-mean(meandists$meandist)
meandists$distance[which(abs((meandists$meandist-mean(meandists$meandist))) > 1*sd(meandists$meandist))] = 1
meandists$distance[which(abs((meandists$meandist-mean(meandists$meandist))) > 1*sd(meandists$meandist))] = 1
meandists$distance[which(abs((meandists$meandist-mean(meandists$meandist))) > 2*sd(meandists$meandist))] = 2
meandists$distance[which(abs((meandists$meandist-mean(meandists$meandist))) > 3*sd(meandists$meandist))] = 3
meandists$distance[which(abs((meandists$meandist-mean(meandists$meandist))) > 4*sd(meandists$meandist))] = 4
meandists$distance[which(abs((meandists$meandist-mean(meandists$meandist))) > 5*sd(meandists))] = 5
which(abs((meandists$meandist-mean(meandists$meandist))) > 5*sd(meandists))
which(abs((meandists$meandist-mean(meandists$meandist))) > 4*sd(meandists$meandist))
which(abs((meandists$meandist-mean(meandists$meandist))) > 3*sd(meandists$meandist))
which(abs((meandists$meandist-mean(meandists$meandist))) > 2*sd(meandists$meandist))
2*sd(meandists$meandist
)
meandists$meandist-mean(meandists$meandist)
out=list()
for (i in 1:length(ids)) {
if (!(i %in% c(72))) {
id=ids[i]
coucheref.sample = coucheref[coucheref$id==id, ]
traces.sample = traces[traces$idbcae==id,  ]
pts.ref = spsample(coucheref.sample, n=gLength(coucheref.sample)/10, type="regular") # tous les 10 m
pts.traces = spsample(traces.sample, n=gLength(traces.sample)/10, type="regular")
coords.ref = coordinates(pts.ref)
coords.traces = coordinates(pts.traces)
dists = get.knnx(data=coords.ref, query=coords.traces, k=1)$nn.dist
meandist = mean(dists)
out[[i]] = cbind(id,  abs(meandist))
}
}
dists
meandists = as.data.frame(do.call(rbind, out))
sd(meandists$meandist)
meandists$distance = 0
meandists = as.data.frame(do.call(rbind, out))
meandists
names(meandists)
meandists = as.data.frame(do.call(rbind, out)); names(meandists) = c(id, meandist)
sd(meandists$meandist)
meandists
names(meandists)
meandists = as.data.frame(do.call(rbind, out)); names(meandists) = c("id", "meandist")
sd(meandists$meandist)
mean(meandists$meandist)
hist(meandists$meandist)
summary(meandists$meandist)
which(meandists$meandist > 10000)
meandists$id[which(meandists$meandist > 10000)]
meandists
names(meandists)
write.csv(meandists, "OUT/qualité/meandists_riviere.csv")
names(pts)
which(pts$id==31)
plot(pts[which(pts$id==31)])
plot(pts[which(pts$id==31), ])
names(traces)
plot(traces[which(traces$id==31), ])
plot(traces[which(traces$idbcae==31), ])
coucheref <- readOGR("IN", "TRONCON_HYDROGRAPHIQUE__V3_modif")
traces <- readOGR("OUT/QUALITE", "traces_bcae")
traces <- readOGR("OUT/qualité", "traces_bcae")
plot(traces[which(traces$idbcae==31), ])
pts = qualityPoints(sourceLayer=coucheref, targetLayer=traces)
writeOGR(pts, "OUT/qualité", "pts_bcae", "ESRI Shapefile")
writeOGR(pts, "OUT/qualité", "pts_bcae", "ESRI Shapefile", overwrite=TRUE)
names(pts)
out=list()
for (i in 1:length(ids)) {
if (!(i %in% c(72))) {
id=ids[i]
coucheref.sample = coucheref[coucheref$id==id, ]
traces.sample = traces[traces$idbcae==id,  ]
pts.ref = spsample(coucheref.sample, n=gLength(coucheref.sample)/10, type="regular") # tous les 10 m
pts.traces = spsample(traces.sample, n=gLength(traces.sample)/10, type="regular")
coords.ref = coordinates(pts.ref)
coords.traces = coordinates(pts.traces)
dists = get.knnx(data=coords.ref, query=coords.traces, k=1)$nn.dist
meandist = mean(dists)
out[[i]] = cbind(id,  abs(meandist))
}
}
meandists = as.data.frame(do.call(rbind, out)); names(meandists) = c("id", "meandist")
write.csv(meandists, "OUT/qualité/meandists_riviere.csv", overwrite=TRUE)
?write.csv
write.csv(meandists, "OUT/qualité/meandists_riviere.csv")
update.packages(ask = FALSE)
dir1="D:/WKSP/2015/151019_SBEP_JGL_TELETEDECTION_SCAN25/ALGORITHME_EXTRACTION_LIGNES_COULEUR_pour distribution/lib/R/R-3.1.2\library"
dir1="D:/WKSP/2015/151019_SBEP_JGL_TELETEDECTION_SCAN25/ALGORITHME_EXTRACTION_LIGNES_COULEUR_pour distribution/lib/R/R-3.1.2/library"
list.files(dir1)
dir2 = "D:/MES_DOCUMENTS\R/win-library/3.1"
dir2 = "D:/MES_DOCUMENTS/R/win-library/3.1"
l1 = unlist(list.files(dir1))
l2 = unlist(list.files(dir2))
l1
l2
l1
dir2
which(l2 %in% l1)
l2[which(l2 %in% l1)]
dir1
l1[which(!(l1 %in% l2))]
dir1
l1
write.csv(l1, "D:/WKSP/2015/151019_SBEP_JGL_TELETEDECTION_SCAN25/ALGORITHME_EXTRACTION_LIGNES_COULEUR_pour distribution/liste_libs.csv")
l1
setwd("D:/WKSP/2015/151019_SBEP_JGL_TELETEDECTION_SCAN25/ALGORITHME_EXTRACTION_LIGNES_COULEUR_pour distribution/lib/R/R-3.1.2/library")
list.files
list.files()
lnew = unlist(list.files())
lnew
lold=l1
lold
lnew[which(!(lnew %in% lold))]
unlink(lnew[which(!(lnew %in% lold))])
?unlink
lnew[which(!(lnew %in% lold))]
getwd()
unlink("BiocGenerics")
unlink("BiocGenerics/")
file.remove("BiocGenerics")
unlink("BiocGenerics")
file.remove("BiocGenerics")
lnew[which(!(lnew %in% lold))]
unlist(list.files())[which(!(unlist(list.files()) %in% lold))]
install.packages("lattice")
install.packages("lattice")
install.packages("lattice")
install.packages("Matrix")
install.packages("RStoolbox")
update.packages(ask=FALSE)
